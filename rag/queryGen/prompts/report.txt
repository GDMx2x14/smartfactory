USER QUERY: {_INPUT_}

INSTRUCTIONS:
TODAY is {_TODAY_}.
Extract information from the USER QUERY based on the following rules and output it in the EXAMPLE OUTPUT specified format.
All dates in the USER QUERY are in the format DD/MM/YYYY. When providing your OUTPUT, always convert all dates to the format YYYY-MM-DD. If a date range is given, maintain the range format (e.g., "01/12/2024 -> 10/12/2024" should become "2024-12-01 -> 2024-12-10").

LIST_1 (list of machines): '{_MACHINES_}'
LIST_2 (list of kpis): '{_KPIS_}'

RULES:
1. Match IDs:
    -Look for any terms in the query that match IDs from LIST_1 or LIST_2.
    -If a match contains a machine type without a specific number, return all machines of that type. Example: 'Testing Machine' -> ['Testing Machine 1', 'Testing Machine 2', 'Testing Machine 3'].
    -If no IDs from LIST_2 are associated with the matched KPIs, return ['NULL'] as [matched LIST_2 IDs].
    -If no IDs from LIST_1 are associated with the matched machines, return ['NULL'] as [matched LIST_1 IDs].
    -If 'all' IDs from LIST_2 are associated with the matched KPIs, return ['ALL'] as [matched LIST_2 IDs]. Example: 'predict all kpis for ...' -> ['ALL']
    -If 'all' IDs from LIST_1 are associated with the matched machines, return ['ALL'] as [matched LIST_1 IDs]. Example: 'calculate for all machines ...' -> ['ALL']
2. Determine Time Window:
    -if there is a time window described by exact dates, use them, otherwise return the expression which individuates the time window: 'last/next X days/weeks/months' using the format <last/next, X, days/weeks/months>
    -If no time window is specified, use NULL.
    -if there is a reference to an exact month and a year, return the time windows starting from the first of that month and ending to the last day of that month.
    -Yesterday must be returned as {_YESTERDAY_TW_}, today as {_TODAY_TW_} and tomorrow as {_TOMORROW_TW_}.
    -Allow for minor spelling or formatting mistakes in the matched expressions and correct them as done in the examples below.
3. Handle Errors:
    -Allow for minor spelling or formatting mistakes in the input.
    -If there is ambiguity matching a kpi, you can match USER QUERY with the one in LIST_2 which ends with '_avg'
4. Output Format:
    -For each unique combination of machine IDs and KPIs, return a tuple in this format: ([matched LIST_1 IDs], [matched LIST_2 IDs], <time window_prediction, time window_calculation>), exact dates are in the format 'YYYY-MM-DD -> YYYY-MM-DD'.
    -time window_prediction is the time window related to the prediction part of the report.
    -time window_calculation is the time window related to the calculation part of the report.

NOTES:
-Ensure output matches the one of the EXAMPLES below exactly, I need only the OUTPUT section.

EXAMPLES:
'
INPUT: generate a report about the kpi cost_idle arg and cost idle std for the assembly machine 1 and Low capacity cutting machine for the past 5 day and the next 10 days, makes also a report about calculate offlinetime med for Assembly machine 3 using data from the last two months and predictiong the next 3 weeks. Can you make a report of all kpis for 20/11/2024 -> 18/11/2024 and predicting next month for Low Capacity Cutting Machine 1?
OUTPUT: (['Assembly Machine 1', 'Low Capacity Cutting Machine 1'], ['cost_idle_avg', 'cost_idle_std'], <<last, 5, days>; <next, 10, days>>), (['Assembly Machine 3'], ['offline_time_med'], <<last, 2, months>; <next, 3, weeks>>), (['Low Capacity Cutting Machine 1'], ['ALL'], <2024-11-20 -> 2024-11-18; <next, 1, months>>)

INPUT: Calculate a report for the last 2 weeks including the standard deviation and the avreage of the cost_idle for Low capacity cutting machine 1 and Assemby Machine 2. Calculate for the same machines also a report about the offline time median. generate a report about the highest offline time for low capacity cutting machine 1?
OUTPUT: (['Low Capacity Cutting Machine 1', 'Assembly Machine 2'], ['cost_idle_std', 'cost_idle_avg'], <<last, 2, weeks>; NULL>), (['Low Capacity Cutting Machine 1', 'Assembly Machine 2'], ['offline_time_med'], <NULL; NULL>), (['Low Capacity Cutting Machine 1'], ['offline_time_max'], <NULL; NULL>)

INPUT: Generate a report including the offline time median about laste 3 weeks and predict next 6 days. Can you generate a report about the working time for Assembly machine 1 predicting next 2 weeks, and a another report about the same kpi dor Assembly machine 2 based on data from 03/05/2024 -> 07/06/2024 and predicting the time window 07/07/2024 -> 09/07/2024.
OUTPUT: (['NULL'], ['offline_time_med'], <<last, 3, weeks>; <next, 6, days>>), (['Assembly Machine 1'], ['working_time_avg'], <NULL; <next, 2, weeks>>), (['Assembly Machine 2'], ['working_time_avg'], <2024-05-03 -> 2024-06-07; 2024-07-07 -> 2024-07-09>)

INPUT: make a report for working time min and average for Riveting machine 1 for {_TW1_}. makes for all machines a report about total amount of working time using data from June 2024 and predict the next 5 weeks.
OUTPUT: (['Riveting Machine'], ['working_time_min','working_time_avg'], <{_TW2_}; NULL>), (['ALL'], ['working_time_sum'], <2024-06-01 -> 2024-06-30; <next, 5, weeks>>)

INPUT: Can you generate a report predicting the next 2 days for Riveting machine 1? make a report for all the assembly machine including the cost idle average and the sum of working time using data from last 2 months and including a prediction for next 3 weeks. Generate the report for November 2024 low capacity cutting machne using the cost_idle_std, predicting March 2025. 
OUTPUT: (['Riveting Machine'], ['NULL'], <NULL; <next, 2, days>>), (['Assembly Machine 1', 'Assembly Machine 2', 'Assembly Machine 3'], ['cost_idle_avg', 'working_time_sum'], <<last, 2, months>; <next, 3, weeks>>), (['Low Capacity Cutting Machine 1'], ['cost_idle_std'], <2024-11-01 -> 2024-11-30; 2025-03-01 -> 2025-03-31>)
'